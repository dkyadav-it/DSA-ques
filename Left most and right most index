//Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element X in the given array.

//Note: If the element is not present in the array return {-1,-1} as pair.

class Solution {
    public long leftOcc(long v[],long x){
        int s=0;
        int e=v.length-1;
        int mid=s+(e-s)/2;
        long ans=-1;
        while(s<=e){
            if(v[mid]==x){
                ans=Long.valueOf(mid);
                e=mid-1;
            }else if(v[mid]<x)
            s=mid+1;
            else
            e=mid-1;
            
            mid=s+(e-s)/2;
           
        }
        return ans;
    }
    
     public long rightOcc(long v[],long x){
         int s=0;
         int e=v.length-1;
        int mid=s+(e-s)/2;
        long ans=-1;
        while(s<=e){
            if(v[mid]==x){
                ans=Long.valueOf(mid);
                s=mid+1;
            }else if(v[mid]<x)
            s=mid+1;
            else
            e=mid-1;
            
            mid=s+(e-s)/2;
           
        }
        return ans;
    }
   
    public pair indexes(long v[], long x)
    {
        long a1=leftOcc(v,x);
        long a2=rightOcc(v,x);
        
        return new pair(a1,a2);
        
    }
}
