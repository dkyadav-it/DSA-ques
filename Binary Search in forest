// https://practice.geeksforgeeks.org/problems/ffd66b6a0bf7cefb9987fa455974b6ea5695709e/1/?page=1&category[]=Binary%20Search&sortBy=submissions
//There are n trees in a forest. The heights of the trees is stored in array tree[], where tree[i] denotes the height of the ith tree in the forest. If the ith tree is cut at a height H, then the wood collected is tree[i] - H, provided tree[i] > H. If the total woods that needs to be collected is exactly equal to k, find the height H at which every tree should be cut (all trees have to be cut at the same height). If it is not possible then return -1 else return H.

class Solution
{
    public static int checkWood(int tree[] , int n , int mid){
        int wood=0;
        for(int i=0;i<n;i++){
            if(tree[i]-mid>=0){
                wood+=tree[i]-mid;
            }
        }
        return wood;
        
    }
    static int find_height(int tree[], int n, int k)
    {
        int s=0;
        int max=-1;
        
        for(int i=0;i<n;i++){
            max=Math.max(max,tree[i]);
        }
        int e=max;
        int mid=s+(e-s)/2;
        while(s<=e){
            if(checkWood(tree,n,mid)==k)
            return mid;
            else if(checkWood(tree,n,mid)<k)
            e=mid-1;
            else
            s=mid+1;
            
            mid=s+(e-s)/2;
        }
        return -1;
    }
}
